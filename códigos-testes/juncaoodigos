import os
import cv2
import numpy as np

# Define Main Variables
dir_path = os.path.dirname(os.path.realpath(__file__)) + "/numpy_saved"  # path of current directory
img_resize = (800, 800)  # set o/p image size
scale_factor = 0.5  # scale factor for resizing the image

# Define Functions
def get_warp_img(img, dir_path, img_resize):
    pts1 = np.load(dir_path + '/chess_board_warp_prespective.npz')['pts1']
    pts2 = np.load(dir_path + '/chess_board_warp_prespective.npz')['pts2']
    H, _ = cv2.findHomography(pts1, pts2)
    result = cv2.warpPerspective(img, H, img_resize)
    return result

def draw_circle(event, x, y, flags, param):
    global ix, iy
    if event == cv2.EVENT_LBUTTONDBLCLK:
        cv2.circle(img, (x, y), 2, (255, 0, 0), -1)
        ix, iy = x, y

def get_points(image, numOfPoints):
    global img
    global ix, iy
    img = image.copy()
    img = cv2.resize(img, (800, 800))
    width, height = image.shape[:2]
    cv2.namedWindow("image")
    cv2.setMouseCallback("image", draw_circle)
    points = []
    print("Press 'a' to add point in the following order: top-right, top-left, bottom-right, bottom-left.")
    while len(points) != numOfPoints:
        cv2.imshow("image", img)
        k = cv2.waitKey(1)
        if k == ord('a'):
            points.append([int(ix), int(iy)])
            cv2.circle(img, (ix, iy), 3, (0, 0, 255), -1)
    cv2.destroyAllWindows()
    
    # Sort points to match the order: top-right, top-left, bottom-right, bottom-left
    if len(points) == 4:
        # Assuming points are roughly in order of top-right, top-left, bottom-right, bottom-left
        points = sorted(points, key=lambda p: (p[1], p[0]))  # Sort by y first, then by x
        sorted_points = [
            sorted(points[:2], key=lambda p: p[0]),  # Top points: sorted by x
            sorted(points[2:], key=lambda p: p[0])   # Bottom points: sorted by x
        ]
        points = [sorted_points[0][1], sorted_points[0][0], sorted_points[1][1], sorted_points[1][0]]
    return list(points)

# Camera position calibration
while True:
    print("Do you want to set camera position [y/n]: ", end=" ")
    answer = str(input())
    if answer.lower() == "y":
        print("Press 'q' to exit: ")
        while True:
            flag, img = cv2.VideoCapture('https://192.168.2.107:8080/video').read()
            img = cv2.resize(img, img_resize)
            if flag:
                cv2.imshow("Set camera position", img)
                k = cv2.waitKey(1)
                if k == ord('q'):
                    cv2.destroyAllWindows()
                    break
        break
    elif answer.lower() == "n":
        print("\nHope that camera position is already set...\n")
        break
    else:
        print("Invalid Input")

# Image warp perspective
while True:
    print("Do you want to warp perspective image [y/n]: ", end=" ")
    answer = str(input())
    ret, img = cv2.VideoCapture('https://192.168.2.107:8080/video').read()
    img = cv2.resize(img, (800, 800))
    width, height = 800, 800
    if answer.lower() == "y":
        warp_points = get_points(img, 4)
        pts1 = np.float32([[warp_points[0][0], warp_points[0][1]],
                           [warp_points[1][0], warp_points[1][1]],
                           [warp_points[2][0], warp_points[2][1]],
                           [warp_points[3][0], warp_points[3][1]]])
        pts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]])
        np.savez(dir_path + "/chess_board_warp_prespective.npz", pts1=pts1, pts2=pts2)
        result = get_warp_img(img, dir_path, img_resize)
        cv2.imshow("result", result)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        break
    else:
        print("Enter valid input")

# Create grid


while True:
    print("Do you want to calibrate new points for corners [y/n]:", end=" ")
    ans = input().strip().lower()
    if ans == "y":
        ret, img = cv2.VideoCapture('https://192.168.2.107:8080/video').read()
        img = cv2.resize(img, (800, 800))
        img = get_warp_img(img, dir_path, img_resize)
   
    else:
        print("Invalid input")
