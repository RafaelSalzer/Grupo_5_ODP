import cv2
import numpy as np

def detect_red_circles_from_camera():
    # Abre a câmera
    cap = cv2.VideoCapture(0)  # '0' indica a primeira câmera conectada

    if not cap.isOpened():
        print("Erro ao acessar a câmera.")
        return []

    while True:
        # Captura o frame da câmera
        ret, frame = cap.read()

        if not ret:
            print("Erro ao capturar a imagem.")
            break

        # Converte para o espaço de cores HSV
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # Define o intervalo de cores vermelhas no espaço HSV
        lower_red = np.array([0, 100, 150])
        upper_red = np.array([8, 255, 255])

        # Cria uma máscara para isolar as bolinhas vermelhas
        mask = cv2.inRange(hsv, lower_red, upper_red)

        # Detecta contornos na máscara
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # Lista para armazenar as coordenadas das bolinhas
        points = []

        # Itera sobre os contornos detectados
        for contour in contours:
            # Calcula o círculo mínimo que envolve o contorno
            ((x, y), radius) = cv2.minEnclosingCircle(contour)

            # Filtra por tamanho mínimo do círculo (para evitar ruídos)
            if radius > 1.5:
                points.append((int(x), int(y)))
                
        filtered_points = []
        proximity_threshold = 20  # Distância mínima entre dois pontos considerados duplicados

        for i, (x1, y1) in enumerate(points):
            duplicate = False
            for j, (x2, y2) in enumerate(points):
                if i != j and np.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < proximity_threshold:
                    duplicate = True
                    break
            if not duplicate:
                filtered_points.append((x1, y1))

                # Desenha o círculo detectado na imagem
                cv2.circle(frame, (int(x1), int(y1)), int(radius), (0, 255, 0), 2)

        # Exibe a imagem com os círculos detectados
        cv2.imshow("Detected Circles", frame)

        # Se apertar 'q', sai do loop
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Libera a câmera e fecha as janelas
    cap.release()
    cv2.destroyAllWindows()

    return points

# Exemplo de uso
red_circle_coords = detect_red_circles_from_camera()
print("Coordenadas das bolinhas vermelhas:", red_circle_coords)
